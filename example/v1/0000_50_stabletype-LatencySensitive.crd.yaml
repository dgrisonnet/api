apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.openshift.io: https://github.com/openshift/api/pull/xxx
    include.release.openshift.io/ibm-cloud-managed: "true"
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
    release.openshift.io/feature-set: LatencySensitive
  name: stableconfigtypes.example.openshift.io
spec:
  group: example.openshift.io
  names:
    kind: StableConfigType
    listKind: StableConfigTypeList
    plural: stableconfigtypes
    singular: stableconfigtype
  scope: Cluster
  versions:
    - name: v1
      schema:
        openAPIV3Schema:
          description: "StableConfigType is a stable config type that may include TechPreviewNoUpgrade fields. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer)."
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: spec is the specification of the desired behavior of the StableConfigType.
              type: object
              required:
                - immutableField
              properties:
                celUnion:
                  description: celUnion demonstrates how to validate a discrminated union using CEL
                  type: object
                  properties:
                    optionalMember:
                      description: optionalMember is a union member that is optional.
                      type: string
                    requiredMember:
                      description: requiredMember is a union member that is required.
                      type: string
                    type:
                      description: type determines which of the union members should be populated.
                      type: string
                      enum:
                        - RequiredMember
                        - OptionalMember
                        - EmptyMember
                  x-kubernetes-validations:
                    - rule: 'has(self.type) && self.type == ''RequiredMember'' ?  has(self.requiredMember) : !has(self.requiredMember)'
                      message: requiredMember is required when type is RequiredMember, and forbidden otherwise
                    - rule: 'has(self.type) && self.type == ''OptionalMember'' ?  true : !has(self.optionalMember)'
                      message: optionalMember is forbidden when type is not OptionalMember
                evolvingUnion:
                  description: evolvingUnion demonstrates how to phase in new values into discriminated union
                  type: object
                  properties:
                    type:
                      description: type is the discriminator. It has different values for Default and for TechPreviewNoUpgrade
                      type: string
                      enum:
                        - ""
                        - StableValue
                immutableField:
                  description: immutableField is a field that is immutable once the object has been created. It is required at all times.
                  type: string
                  x-kubernetes-validations:
                    - rule: self == oldSelf
                      message: immutableField is immutable
                optionalImmutableField:
                  description: optionalImmutableField is a field that is immutable once set. It is optional but may not be changed once set.
                  type: string
                  x-kubernetes-validations:
                    - rule: oldSelf == '' || self == oldSelf
                      message: optionalImmutableField is immutable once set
                stableField:
                  description: "stableField is a field that is present on default clusters and on tech preview clusters \n If empty, the platform will choose a good default, which may change over time without notice."
                  type: string
            status:
              description: status is the most recently observed status of the StableConfigType.
              type: object
              properties:
                conditions:
                  description: 'Represents the observations of a foo''s current state. Known .status.conditions.type are: "Available", "Progressing", and "Degraded"'
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                immutableField:
                  description: immutableField is a field that is immutable once the object has been created. It is required at all times.
                  type: string
                  x-kubernetes-validations:
                    - rule: self == oldSelf
                      message: immutableField is immutable
      served: true
      storage: true
      subresources:
        status: {}
